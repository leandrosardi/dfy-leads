<%
begin
    name = params[:name]
    id_export = params[:id_export]
    url = params[:url]

    # getting the search filters
    positive_keywords = params[:positive_keywords]
    positive_positions = params[:positive_positions]
    positive_industries = params[:positive_industries]
    positive_locations = params[:positive_locations]
    positive_revenues = params[:positive_revenues]
    positive_headcounts = params[:positive_headcounts]
    positive_engagements = params[:positive_engagements]

    negative_keywords = params[:negative_keywords]
    negative_positions = params[:negative_positions]
    negative_industries = params[:negative_industries]
    negative_locations = params[:negative_locations]
    negative_revenues = params[:negative_revenues]
    negative_headcounts = params[:negative_headcounts]
    negative_engagements = params[:negative_engagements]
  
    # writing the hash descriptor for the new search
    h = {
        'name' => name,
        'description' => 'Ghost search for user profiling.',
        'id_user' => @login.id_user,
        'saved' => false,
        'no_of_results' => -1, # unknown - no matters
        'no_of_companies' => -1, # unknown - no matters
        'keywords' => [],
        'positions' => [],
        'locations' => [],
        'industries' => [],
        'revenues' => [],
        'headcounts' => [],
        'engagements' => [],
    }

    # adding the positive job engagements to the hash
    h['keywords'] += positive_keywords.split(/,/).map { |p| { 'value' => p.strip, 'positive' => true } } if positive_keywords.strip.length > 0

    # adding the negative job engagements to the hash
    h['keywords'] += negative_keywords.split(/,/).map { |p| { 'value' => p.strip, 'positive' => false } } if negative_keywords.strip.length > 0

    # adding the positive job positions to the hash
    h['positions'] += positive_positions.split(/,/).map { |p| { 'value' => p.strip, 'positive' => true } } if positive_positions.strip.length > 0

    # adding the negative job positions to the hash
    h['positions'] += negative_positions.split(/,/).map { |p| { 'value' => p.strip, 'positive' => false } } if negative_positions.strip.length > 0

    # adding the positive industries to the hash
    h['industries'] += positive_industries.split(/,/).map { |i| { 'name' => i.strip, 'positive' => true } } if positive_industries.strip.length > 0

    # adding the negative industries to the hash
    h['industries'] += negative_industries.split(/,/).map { |i| { 'name' => i.strip, 'positive' => false } } if negative_industries.strip.length > 0

    # adding hte positive locations to the hash
    h['locations'] += positive_locations.split(/,/).map { |l| { 'value' => l.strip, 'positive' => true } } if positive_locations.strip.length > 0

    # adding the negative locations to the hash
    h['locations'] += negative_locations.split(/,/).map { |l| { 'value' => l.strip, 'positive' => false } } if negative_locations.strip.length > 0

    # adding the positive revenues to the hash
    h['revenues'] += positive_revenues.split(/,/).map { |r| { 'name' => r.strip, 'positive' => true } } if positive_revenues.strip.length > 0

    # adding the negative revenues to the hash
    h['revenues'] += negative_revenues.split(/,/).map { |r| { 'name' => r.strip, 'positive' => false } } if negative_revenues.strip.length > 0

    # adding the positive headcounts to the hash
    h['headcounts'] += positive_headcounts.split(/,/).map { |h| { 'name' => h.strip, 'positive' => true } } if positive_headcounts.strip.length > 0

    # adding the negative headcounts to the hash
    h['headcounts'] += negative_headcounts.split(/,/).map { |h| { 'name' => h.strip, 'positive' => false } } if negative_headcounts.strip.length > 0

    # adding the positive job engagements to the hash
    h['engagements'] += positive_engagements.split(/,/).map { |p| { 'value' => p.strip, 'positive' => true } } if positive_engagements.strip.length > 0

    # adding the negative job engagements to the hash
    h['engagements'] += negative_engagements.split(/,/).map { |p| { 'value' => p.strip, 'positive' => false } } if negative_engagements.strip.length > 0

    # register the search performed by the user, even it the user didn't request to save the search.
    # we do this in order to profile each user, to know his/her preferences, and offer more data later.
    s = BlackStack::Leads::Search.new(h)
    #s.no_of_results = s.count
    #s.no_of_companies = s.count_companies
    s.save

    # return 
    # on a new search, return the paginatin to the page 1.
    # don't show any success message in this case. Just the results of the search.
    redirect "/leads/results/#{s.id.to_guid}?number=1" 
    
rescue => e
    # return errors
    redirect "/leads/results?err=#{CGI::escape(e.message)}"
end
%>